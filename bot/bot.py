import os
import asyncio
import logging

import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold, hlink
from aiogram.client.bot import DefaultBotProperties

from scraper.config import RANKED_CSV, TOP_N, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –§–∞–π–ª —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –í—ã–Ω–µ—Å–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥
#  RANKED_CSV = "ranked_vacancies.csv"
# TOP_N = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
def load_vacancies():
    if not os.path.exists(RANKED_CSV):
        logging.error('–§–∞–π–ª —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return None

    try:
        df = pd.read_csv(RANKED_CSV).head(TOP_N)
        logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –≤–∞–∫–∞–Ω—Å–∏–π.')
        #  df = df.sort_values(by="score", ascending=False).head(TOP_N)
        return df.to_dict(orient="records")
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}')
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
async def send_vacancies():
    vacancies = load_vacancies()
    if not vacancies:
        await bot.send_message(TELEGRAM_CHAT_ID, '‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return

    for vacancy in vacancies:
        try:
            vacancy_url = vacancy.get('url', '#') or '#'
            response_link = vacancy.get('response_link', '#') or '#'
            phone_number = vacancy.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            email_contact = vacancy.get('email_contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')

            text = (f"üíº {hbold(vacancy['title'])}\n"
                    f"‚≠ê <b>–ü—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π –±–∞–ª–ª:</b> {vacancy['score']}\n"
                    f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {vacancy['salary']} —Ä—É–±.\n"
                    f"üìÖ <b>–û–ø—ã—Ç:</b> {vacancy['experience']}\n"
                    f"üè¢ <b>–ó–∞–Ω—è—Ç–æ—Å—Ç—å:</b> {vacancy['common_employment']}\n"
                    f"‚è≥ <b>–ì—Ä–∞—Ñ–∏–∫:</b> {vacancy['works_schedule']}\n"
                    f"üïí <b>–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:</b> {vacancy['working_hours']}\n"
                    f"üßë‚Äçüíª <b>–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:</b> {vacancy['work_formats']}\n"
                    f"üóì <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {vacancy['date']}\n"
                    f"üìû <b>–ü–æ–∑–≤–æ–Ω–∏—Ç—å:</b> {phone_number}\n"
                    f"‚úâÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É:</b> {email_contact}\n"
                    f"üîó {hlink('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é', vacancy_url)}\n"
                    f"‚úâÔ∏è {hlink('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é', response_link)}\n")

            # –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            description = vacancy['description']
            if len(description) > 400:
                description = description[:400] + "...\nüìù <i>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ</i>"
            text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}"

            await bot.send_message(TELEGRAM_CHAT_ID, text=text)
            logging.info(f'–í–∞–∫–∞–Ω—Å–∏—è {vacancy["title"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º')

            await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}')


# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(send_vacancies())
    # dp.startup.register(send_vacancies)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
